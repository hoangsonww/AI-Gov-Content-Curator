name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  formatting:
    name: "üîß Code Formatting & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js & cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install root dependencies
        run: npm ci
        continue-on-error: true

      - name: Run Prettier
        run: npm run format
        continue-on-error: true

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Dependency review
        uses: github/dependency-review-action@v2

      - name: NPM audit
        run: npm audit --audit-level=high
        continue-on-error: true

  backend-tests:
    name: "‚úÖ Backend Unit & Integration"
    runs-on: ubuntu-latest
    needs: formatting
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js & cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install backend dependencies
        run: npm --workspace backend ci
        continue-on-error: true

      - name: Lint backend
        run: npm --workspace backend run lint
        continue-on-error: true

      - name: Build backend
        run: npm --workspace backend run build
        continue-on-error: true

      - name: Run backend tests
        run: npm --workspace backend run test
        continue-on-error: true

      - name: Upload backend coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage

  frontend-tests:
    name: "üåê Frontend Component & E2E"
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js & cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: npm --workspace frontend ci
        continue-on-error: true

      - name: Lint frontend
        run: npm --workspace frontend run lint
        continue-on-error: true

      - name: Build frontend
        run: npm --workspace frontend run build
        continue-on-error: true

      - name: Run frontend unit tests
        run: npm --workspace frontend run test:unit
        continue-on-error: true

      - name: Install Playwright browsers
        run: npm --workspace frontend exec playwright install --with-deps
        continue-on-error: true

      - name: Run E2E tests
        run: npm --workspace frontend run test:e2e
        continue-on-error: true

      - name: Upload frontend coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

  crawler-tests:
    name: "ü§ñ Crawler Service Tests"
    runs-on: ubuntu-latest
    needs: frontend-tests
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js & cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install crawler dependencies
        run: npm --workspace crawler ci
        continue-on-error: true

      - name: Lint crawler
        run: npm --workspace crawler run lint
        continue-on-error: true

      - name: Build crawler
        run: npm --workspace crawler run build
        continue-on-error: true

      - name: Run crawler tests
        run: npm --workspace crawler run test
        continue-on-error: true

      - name: Upload crawler coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: crawler-coverage
          path: crawler/coverage

  done:
    name: "üéâ Pipeline Complete"
    runs-on: ubuntu-latest
    needs: [formatting, backend-tests, frontend-tests, crawler-tests]
    steps:
      - run: echo "‚úÖ CI/CD pipeline finished successfully."
